name: Claude Code Review (via z.ai)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install
        working-directory: .github/scripts

      - name: Run Code Review
        env:
          GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
          ANTHROPIC_BASE_URL: https://api.z.ai/api/anthropic
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: node .github/scripts/glm-code-review.js

      - name: Post code review
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let reviewBody = '';
            let inlineComments = [];

            // Read review markdown
            try {
              reviewBody = fs.readFileSync('review-output.md', 'utf8');
              console.log('Review markdown read successfully');
            } catch (error) {
              console.error('Error reading markdown:', error);
              reviewBody = '⚠️ No se pudo completar la revisión de código. Por favor, revisa los logs del workflow.';
            }

            // Read inline comments JSON
            try {
              const commentsData = JSON.parse(fs.readFileSync('review-comments.json', 'utf8'));
              inlineComments = commentsData.comments || [];
              console.log(`Found ${inlineComments.length} inline comments`);
            } catch (error) {
              console.warn('No inline comments found or error reading:', error.message);
            }

            // Get PR details
            const pr = context.payload.pull_request;
            const commitId = pr.head.sha;

            // Create review with inline comments
            try {
              const reviewData = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_id: commitId,
                body: reviewBody,
                event: 'COMMENT'
              };

              // Add inline comments if present
              if (inlineComments.length > 0) {
                reviewData.comments = inlineComments.map(comment => ({
                  path: comment.path,
                  line: comment.line,
                  side: comment.side || 'RIGHT',
                  body: comment.body
                }));
              }

              await github.rest.pulls.createReview(reviewData);
              console.log(`Review posted successfully with ${inlineComments.length} inline comments`);
            } catch (error) {
              console.error('Error posting review:', error);
              console.error('Error details:', JSON.stringify(error.response?.data || error.message));
              throw error;
            }
