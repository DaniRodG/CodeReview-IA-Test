name: Claude Code Review (via z.ai)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install
        working-directory: .github/scripts

      - name: Run Code Review
        env:
          GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
          ANTHROPIC_BASE_URL: https://api.z.ai/api/anthropic
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: node .github/scripts/glm-code-review.js

      - name: Post code review
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let reviewBody = '';
            let inlineComments = [];
            let reviewAction = 'COMMENT'; // Default

            // Read review markdown
            try {
              reviewBody = fs.readFileSync('review-output.md', 'utf8');
              console.log('Review markdown read successfully');
            } catch (error) {
              console.error('Error reading markdown:', error);
              reviewBody = '‚ö†Ô∏è No se pudo completar la revisi√≥n de c√≥digo. Por favor, revisa los logs del workflow.';
            }

            // Read inline comments and action from JSON
            try {
              const commentsData = JSON.parse(fs.readFileSync('review-comments.json', 'utf8'));
              inlineComments = commentsData.comments || [];
              reviewAction = commentsData.action || 'COMMENT';

              // Validate action
              if (!['APPROVE', 'REQUEST_CHANGES', 'COMMENT'].includes(reviewAction)) {
                console.warn(`Invalid action "${reviewAction}", defaulting to COMMENT`);
                reviewAction = 'COMMENT';
              }

              console.log(`Review action: ${reviewAction}`);
              console.log(`Found ${inlineComments.length} inline comments`);
            } catch (error) {
              console.warn('No inline comments found or error reading:', error.message);
            }

            // Get PR details
            const pr = context.payload.pull_request;
            const commitId = pr.head.sha;

            // Create review with inline comments
            try {
              const reviewData = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                commit_id: commitId,
                body: reviewBody,
                event: reviewAction // La IA decide: APPROVE, REQUEST_CHANGES o COMMENT
              };

              // Add inline comments if present
              if (inlineComments.length > 0) {
                reviewData.comments = inlineComments.map(comment => ({
                  path: comment.path,
                  line: comment.line,
                  side: comment.side || 'RIGHT',
                  body: comment.body
                }));
              }

              await github.rest.pulls.createReview(reviewData);
              console.log(`‚úÖ Review posted successfully!`);
              console.log(`   Action: ${reviewAction}`);
              console.log(`   Inline comments: ${inlineComments.length}`);

              // Show what happened
              if (reviewAction === 'APPROVE') {
                console.log('   ‚úÖ PR aprobado autom√°ticamente - El c√≥digo est√° bien');
              } else if (reviewAction === 'REQUEST_CHANGES') {
                console.log('   ‚ö†Ô∏è Cambios solicitados - Se bloque√≥ el merge');
              } else {
                console.log('   üí¨ Comentarios agregados - El merge no est√° bloqueado');
              }
            } catch (error) {
              console.error('Error posting review:', error);
              console.error('Error details:', JSON.stringify(error.response?.data || error.message));
              throw error;
            }
